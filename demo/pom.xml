<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.jboss.examples</groupId>
  <artifactId>ticket-monster</artifactId>
  <version>2.6.1-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>ticket-monster</name>

  <description>A starter HTML5 + REST webapp project for use on JBoss EAP.</description>

  <properties>
<!-- Explicitly declaring the source encoding eliminates the following
            message: -->
<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
            resources, i.e. build is platform dependent! -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<!-- Timestamp format for the maven.build.timestamp property -->
<!-- You can reference property in pom.xml or filtered resources
            (must enable third-party plugin if using Maven < 2.1) -->
    <maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
<!-- Specify the JBoss AS directory to be the JBOSS_HOME environment
            variable -->
    <jboss.home>${env.JBOSS_HOME}</jboss.home>
    <buildhelper.plugin.version>1.7</buildhelper.plugin.version>

    <mysql.server>localhost</mysql.server>
    <mysql.port>3306</mysql.port>
    <mysql.driver.groupId>mysql</mysql.driver.groupId>
    <mysql.driver.artifactId>mysql-connector-java</mysql.driver.artifactId>
    <mysql.driver.version>5.1.34</mysql.driver.version>
    <mysql.db.schema>ticketmonster</mysql.db.schema>
    <mysql.db.user>sa</mysql.db.user>
    <mysql.db.password>sa</mysql.db.password>
    <db.jdbc.url>jdbc:mysql://${mysql.server}:${mysql.port}/ticketmonster</db.jdbc.url>
    <mysql.driver.name>${mysql.driver.artifactId}-${mysql.driver.version}</mysql.driver.name>
    <wildfly-home>/opt/wildfly/</wildfly-home>
    <wildfly.hibernate.datasource.name>java:jboss/datasources/ticketmonster</wildfly.hibernate.datasource.name>
  </properties>

  <dependencyManagement>
    <dependencies>
<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill
                of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
                of artifacts. We use this here so that we always get the correct versions
                of artifacts. Here we use the jboss-javaee-6.0-with-tools stack (you can
                read this as the JBoss stack of the Java EE 6 APIs, with some extras tools
                for your project, such as Arquillian for testing) and the jboss-javaee-6.0-with-hibernate
                stack you can read this as the JBoss stack of the Java EE 6 APIs, with extras
                from the Hibernate family of projects) -->
      <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>jboss-javaee-7.0-with-tools</artifactId>
        <version>8.2.2.Final</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>jboss-javaee-7.0-with-hibernate</artifactId>
        <version>8.2.2.Final</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>jboss-javaee-7.0-with-resteasy</artifactId>
        <version>8.2.2.Final</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

<dependency>
            <groupId>it.polimi.tower4clouds</groupId>
            <artifactId>java-app-dc</artifactId>
            <version>0.3.1</version>
<exclusions>
      <exclusion>
         <groupId>antlr</groupId>
         <artifactId>antlr</artifactId>
      </exclusion>
</exclusions>
        </dependency>

<!-- First declare the APIs we depend on and need for compilation. All
            of them are provided by JBoss AS 7 -->

<!-- Import the CDI API, we use provided scope as the API is included in
            WildFly -->
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

<!-- Import the Common Annotations API (JSR-250), we use provided scope
            as the API is included in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

<!-- Import the JAX-RS API, we use provided scope as the API is included
            in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
      <version>1.0.0.Final</version>
      <scope>provided</scope>
    </dependency>

<!-- Import the JPA API, we use provided scope as the API is included in
            WildFly -->
    <dependency>
      <groupId>org.hibernate.javax.persistence</groupId>
      <artifactId>hibernate-jpa-2.1-api</artifactId>
      <scope>provided</scope>
    </dependency>

<!-- Import the EJB API, we use provided scope as the API is included in
            WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

<!-- JSR-303 (Bean Validation) Implementation -->
<!-- Provides portable constraints such as @Email -->
<!-- Hibernate Validator is shipped in JBoss EAP -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

<!-- Now we declare any tools needed -->

<!-- Annotation processor to generate the JPA 2.0 metamodel classes
            for typesafe criteria queries -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
      <scope>provided</scope>
    </dependency>

<!-- Needed for running tests (you may also use TestNG) -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

<!-- Optional, but highly recommended -->
<!-- Arquillian allows you to test enterprise code such as EJBs and
            Transactional(JTA) JPA from JUnit/TestNG -->
    <dependency>
      <groupId>org.jboss.arquillian.junit</groupId>
      <artifactId>arquillian-junit-container</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.protocol</groupId>
      <artifactId>arquillian-protocol-servlet</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.shrinkwrap.resolver</groupId>
      <artifactId>shrinkwrap-resolver-depchain</artifactId>
      <type>pom</type>
      <scope>test</scope>

      <exclusions>
      	<exclusion>
      		<artifactId>httpcore</artifactId>
      		<groupId>org.apache.httpcomponents</groupId>
      	</exclusion>
      </exclusions>
    </dependency>

<!-- RESTEasy dependencies that bring in Jackson Core and RESTEasy APIs+SPIs, which we use for
            fine tuning the content of the JSON responses -->
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_3.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>${mysql.driver.groupId}</groupId>
      <artifactId>${mysql.driver.artifactId}</artifactId>
      <version>${mysql.driver.version}</version>
      <scope>provided</scope>
    </dependency>
    
  </dependencies>

  <build>
<!-- Maven will append the version to the finalName (which is the
       name given to the generated war, and hence the context root) -->
    <finalName>${project.artifactId}</finalName>
    <plugins>
<!-- The wildfly plugin deploys your war to a local Wildfly AS container -->
<!-- To use run: mvn package wildfly:deploy -->
      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>1.0.2.Final</version>
        <configuration>
          <username>admin</username>
          <password>admin</password>
          <jboss-home>${wildfly-home}</jboss-home>
        </configuration>
        <executions>
          <execution>
            <id>deploy_jdbc_driver</id>
            <phase>install</phase>
            <goals>
              <goal>deploy-artifact</goal>
            </goals>
            <configuration>
              <groupId>${mysql.driver.groupId}</groupId>
              <artifactId>${mysql.driver.artifactId}</artifactId>
              <version>${mysql.driver.version}</version>
              <name>${mysql.driver.name}</name>
              <driver-name>${mysql.driver.name}</driver-name>
            </configuration>
          </execution>
          <execution>
            <id>add_datasource</id>
            <phase>install</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <address>subsystem=datasources,data-source=java:jboss/datasources/ticketmonster</address>
              <resources>
                <resource>
                  <properties>
                    <jndi-name>java:jboss/datasources/ticketmonster</jndi-name>
                    <connection-url>${db.jdbc.url}</connection-url>
                    <driver-class>com.mysql.jdbc.Driver</driver-class>
                    <driver-name>${mysql.driver.name}_com.mysql.jdbc.Driver_5_1</driver-name>
                    <enabled>true</enabled>
                    <database-name>${mysql.db.schema}</database-name>
                    <security.user-name>${mysql.db.user}</security.user-name>
                    <security.password>${mysql.db.password}</security.password>
                    <pool-name>ticketmonster_pool</pool-name>
                    <use-ccm>true</use-ccm>
                    <use-java-context>true</use-java-context>
                  </properties>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>deploy_application</id>
            <phase>install</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
          </execution>
          <execution>
            <id>undeploy_application</id>
            <phase>clean</phase>
            <goals>
              <goal>undeploy</goal>
            </goals>
            <configuration>
              <ignoreMissingDeployment>true</ignoreMissingDeployment>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>aspectj-maven-plugin</artifactId>
            <version>1.5</version>
            <executions>
                <execution>
                    <goals>
                        <goal>compile</goal>
                        <goal>test-compile</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <complianceLevel>1.7</complianceLevel>
                <source>1.7</source>
                <target>1.7</target>
                <aspectLibraries>
                    <aspectLibrary>
                        <groupId>it.polimi.tower4clouds</groupId>
                        <artifactId>java-app-dc</artifactId>
                    </aspectLibrary>
                </aspectLibraries>
            </configuration>
        </plugin>
    <pluginManagement>

      <plugins>
<!-- Compiler plugin enforces Java 1.6 compatibility and activates
              annotation processors -->
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>2.3.1</version>
          <configuration>
            <source>1.7</source>
            <target>1.7</target>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.1.1</version>
          <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
            <archive>
              <manifestEntries>
                <Dependencies>org.jboss.as.naming,org.jboss.as.server,org.jboss.msc</Dependencies>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.4.3</version>
          <configuration>
            <skip>true</skip>
          </configuration>
        </plugin>

      </plugins>
    </pluginManagement>
  </build>

  <repositories>
    <repository>
      <id>jboss-ga-repository</id>
      <url>http://maven.repository.redhat.com/techpreview/all</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
	<repository>
		<id>deib-polimi-releases</id>
		<url>https://github.com/deib-polimi/deib-polimi-mvn-repo/raw/master/releases</url>
	</repository>
	<repository>
		<id>deib-polimi-snapshots</id>
		<url>https://github.com/deib-polimi/deib-polimi-mvn-repo/raw/master/snapshots</url>
	</repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>jboss-ga-plugin-repository</id>
      <url>http://maven.repository.redhat.com/techpreview/all</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

</project>
